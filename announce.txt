#!/bin/ksh
# -*- Mode: shell-script -*-
#
# $Id: announce.txt,v 1.20 2011/04/26 19:36:37 bkorb Exp $

test -z "${sender}" && sender=bkorb
domain=gnu.org
lname=${sender}@${domain}
fullname='Bruce Korb'
project=complexity

tfile=$(mktemp ./suaXXXXXX) 2>/dev/null
test -z "${tfile}" && tfile=sua$$.txt
mv $tfile ${tfile}.txt
tfile=${tfile}.txt

version=$(autoconf -t 'AC_INIT:$2')

exec 3> ${tfile}

recip=$(echo \
    ${lname} \
    bug-gnu-utils@gnu.org)

nl=$'\n'
to_line='GNU Announcements <info-gnu@gnu.org>'
recip=$(echo ${recip} info-gnu@gnu.org)
ftpurl=ftp://ftp.gnu.org/gnu/${project}

cat >&3 <<_EOF_
From: ${fullname} <${sender}@${domain}>
Sender: ${sender}@${domain}
To: ${to_line}
Subject: Release of version ${version} of ${project}
Reply-To: bug-gnu-utils@gnu.org

GNU complexity computes a complexity measure of C source code.
For the most part, it is very similar to pmccabe results.
The difference is that code length adds linearly to the
score and logic nesting adds geometrically to the score.
Short functions tend to score lower than pmccabe and highly
nested functionality can score considerably higher.
The weighting for length and nesting levels can be adjusted.

Complexity also understands C syntax a little better,
but still overweights complex initializer expressions.

_EOF_

exec 4< NEWS
while read -u4 text
do
  case "${text}" in
  *'New in '* ) break ;; esac  
done

printf "${text}" >&3
sed '/^New in /,$d;//d' >&3 <&4
exec 4<&-

cat >&3 <<_EOF_

${project} home:  http://www.gnu.org/software/${project}/
primary ftp:     ${ftpurl}/
.tar.gz:         ${ftpurl}/${project}-${version}.tar.gz
bug reports:     bkorb at the usual GNU domain
bug archive:     http://lists.gnu.org/mailman/listinfo/bug-gnu-utils/
maintainer:      ${fullname} - ${sender} at the usual GNU domain
_EOF_

exec 3>&-
echo sendmail ${recip} bruce.korb@gmail.com \< ${tfile}
## test $? -eq 0 && rm -f ${tfile}
